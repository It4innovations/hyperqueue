"""
This script automatically builds nedoc documentation during a mkdocs build.
It also allows you to use links to API documentation of a Python package documented by Nedoc.

Use a link that starts with `pyapi:`, followed by a key contained in `map.json`.
`map.json` is generated by Nedoc if you use the `create_map_json = True` configuration in `nedoc.conf`.

Links cannot span a line! Keep them on a single line.
Links that start with # will not be considered.

Example:
The [Box](pyapi:elsie.box.Box) class is awesome.
"""

import json
import logging
import os
import re
from pathlib import Path

import nedoc.config
from nedoc import core

# The second group is used to avoid adding the hash fragment to the link lookup key
LINK_REGEX = re.compile(r"\[`.*?`]\(((?!#)[^#]*?)(#.*?)?\)")

PYTHON_API_DIR = "python/apidoc"

site_url = None
url_map = {}
api_links = 0


def load_nedoc_config(config) -> nedoc.config.Config:
    docs_dir = Path(config["docs_dir"])
    root_dir = docs_dir.parent
    conf_file = root_dir / "nedoc.conf"
    if not conf_file.exists():
        raise Exception(f"nedoc configuration file {conf_file} does not exist. Run `nedoc init`.")
    return nedoc.config.parse_config(str(conf_file))


def build_nedoc(config: nedoc.config.Config, target_dir: Path):
    config.target_path = str(target_dir)

    c = core.Core(config)
    c.build()


def on_config(config, **kwargs):
    global site_url

    # Normalize API site url
    site_url = config.get("site_url") or "/"
    if site_url and site_url[-1] != "/":
        site_url = f"{site_url}/"
    site_url = f"{site_url}{PYTHON_API_DIR}"


def on_files(files, config, **kwargs):
    global url_map

    # Build API documentation
    nedoc_config = load_nedoc_config(config)

    build_dir = Path(config["site_dir"])
    target_dir = build_dir / PYTHON_API_DIR

    os.makedirs(target_dir, exist_ok=True)
    build_nedoc(nedoc_config, target_dir)

    print(f"Generated API documentation into {target_dir}, it will be available at {site_url}")

    # Load URL map
    map_file = target_dir / "map.json"

    if os.path.isfile(map_file):
        with open(map_file) as f:
            url_map = json.load(f)
    else:
        logging.warning(f"WARNING: {map_file} file is missing")


def on_page_markdown(src: str, page, config, *args, **kwargs):
    global api_links

    # TODO: use Markdown parser
    lines = []
    for line_index, line in enumerate(src.splitlines(keepends=False)):
        # Iterate from the end to make replacing substrings easier
        for match in reversed(list(LINK_REGEX.finditer(line))):
            link_key = match.group(1)
            link_url = url_map.get(link_key)
            if link_url:
                api_links += 1
                url = f"{site_url}/{link_url}"
                start, end = match.span(1)
                line = line[:start] + url + line[end:]
            else:
                raise Exception(f"Link key {link_key} not found in {page.file.src_path} on line {line_index}")
        lines.append(line)
    return "\n".join(lines)


def on_post_build(config, **kwargs):
    print(f"Processed {api_links} API links")


def on_serve(server, config, builder, **kwargs):
    nedoc_config = load_nedoc_config(config)
    server.watch(nedoc_config.source_path, builder)
    return server
